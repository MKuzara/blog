// <auto-generated />
using System;
using Blog.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.API.Migrations
{
    [DbContext(typeof(BlogAPIDbContext))]
    partial class BlogAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.API.Models.Domain.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a9247f1-6aee-4c2f-9795-a1d98d8d3937"),
                            Content = "\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n                        Fusce iaculis vehicula neque ut fermentum. Ut urna justo, \r\n                        porttitor sit amet diam at, dictum vulputate elit.",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 39, 31, 855, DateTimeKind.Local).AddTicks(4767),
                            Title = "Blog Post #1",
                            UserId = new Guid("b73ee27e-4084-45ff-b7dd-5a821adef831")
                        },
                        new
                        {
                            Id = new Guid("453fae99-af87-40e5-a005-eace9e3862c1"),
                            Content = "\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n                        Nunc sed nisl diam. Pellentesque habitant morbi tristique \r\n                        senectus et netus et.",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 39, 31, 855, DateTimeKind.Local).AddTicks(4806),
                            Title = "Blog Post #2",
                            UserId = new Guid("6682b6cc-9ea9-4ff3-92dc-cbd306a31cd4")
                        },
                        new
                        {
                            Id = new Guid("ad417376-e1e8-4b18-bfb5-c00e155e9926"),
                            Content = "\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n                        Cras eget finibus nibh. Suspendisse sem ante, ultrices eu \r\n                        ultricies non, facilisis.",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 39, 31, 855, DateTimeKind.Local).AddTicks(4810),
                            Title = "Blog Post #1",
                            UserId = new Guid("b73ee27e-4084-45ff-b7dd-5a821adef831")
                        },
                        new
                        {
                            Id = new Guid("4afaa9a9-7488-4168-9be2-56138e6a2882"),
                            Content = "\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. \r\n                        Duis cursus tincidunt feugiat. Nullam molestie dui id velit \r\n                        vehicula porttitor. Vestibulum.",
                            CreatedDate = new DateTime(2023, 9, 30, 20, 39, 31, 855, DateTimeKind.Local).AddTicks(4815),
                            Title = "Blog Post #1",
                            UserId = new Guid("b73ee27e-4084-45ff-b7dd-5a821adef831")
                        });
                });

            modelBuilder.Entity("Blog.API.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b73ee27e-4084-45ff-b7dd-5a821adef831"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ccd0bd9e-860c-4a88-bcbc-b7ae1523a81e",
                            Email = "user1@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68511df4-5a88-48b6-9b96-013dd3cca6f6",
                            TwoFactorEnabled = false,
                            UserName = "example_user_1"
                        },
                        new
                        {
                            Id = new Guid("6682b6cc-9ea9-4ff3-92dc-cbd306a31cd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d8fc52-6baa-4534-8618-fff24a994d73",
                            Email = "user2@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5952bd59-30a5-4f6e-b161-2f9814fc3ae8",
                            TwoFactorEnabled = false,
                            UserName = "example_user_2"
                        });
                });

            modelBuilder.Entity("Blog.API.Models.Domain.BlogPost", b =>
                {
                    b.HasOne("Blog.API.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
